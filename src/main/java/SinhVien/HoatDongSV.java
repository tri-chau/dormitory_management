/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SinhVien;
import static com.mycompany.qlktx.QLKTX.*;
import com.mycompany.qlktx.DangNhap;
import java.sql.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class HoatDongSV extends javax.swing.JFrame {
    String mssv = DangNhap.GlobalVariables.username;
    //String mssv = "00520001";
    
    private DefaultTableModel tbHoatDong;
    private DefaultTableModel tbNDHoatDong;
    
    
    public HoatDongSV() {
        initComponents();
        btBack.setBorderPainted(false); 
        btBack.setContentAreaFilled(false);
        setSize(800, 600);
        
        thietlapManHinh();
        layDSHoatDong();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbAnhWebDev = new javax.swing.JLabel();
        btBack = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lbTTHD = new javax.swing.JLabel();
        lbBL = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbCTHD = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbHD = new javax.swing.JTable();
        btTimKiem = new javax.swing.JButton();
        btXoaHD = new javax.swing.JButton();
        lbBL1 = new javax.swing.JLabel();
        lbMSSV = new javax.swing.JLabel();
        lbBL2 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        btDKKHD = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 3, true));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 80));

        lbAnhWebDev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/logo.jpg"))); // NOI18N

        btBack.setBackground(new java.awt.Color(254, 254, 254));
        btBack.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btBack.setForeground(new java.awt.Color(255, 255, 255));
        btBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Back.png"))); // NOI18N
        btBack.setBorder(null);
        btBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btBack, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(231, 231, 231)
                .addComponent(lbAnhWebDev, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbAnhWebDev, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btBack)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(800, 80));

        lbTTHD.setBackground(new java.awt.Color(255, 255, 255));
        lbTTHD.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        lbTTHD.setForeground(new java.awt.Color(83, 160, 219));
        lbTTHD.setText("Thông Tin Hoạt Động");

        lbBL.setBackground(new java.awt.Color(255, 255, 255));
        lbBL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lbBL.setText("MSSV:");

        tbCTHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chi tiết HĐ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbCTHD.setRowHeight(180);
        jScrollPane4.setViewportView(tbCTHD);

        tbHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã HĐ", "Tên HĐ", "Ngày diễn ra", "Số lượng ĐK", "Tình trạng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbHD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbHDMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tbHD);

        btTimKiem.setBackground(new java.awt.Color(93, 163, 217));
        btTimKiem.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        btTimKiem.setText("Tìm Kiếm");
        btTimKiem.setActionCommand("");
        btTimKiem.setBorder(null);
        btTimKiem.setBorderPainted(false);
        btTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTimKiemActionPerformed(evt);
            }
        });

        btXoaHD.setBackground(new java.awt.Color(93, 163, 217));
        btXoaHD.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btXoaHD.setForeground(new java.awt.Color(255, 255, 255));
        btXoaHD.setText("Xóa Đăng Ký HĐ");
        btXoaHD.setActionCommand("");
        btXoaHD.setBorder(null);
        btXoaHD.setBorderPainted(false);
        btXoaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXoaHDActionPerformed(evt);
            }
        });

        lbBL1.setBackground(new java.awt.Color(255, 255, 255));
        lbBL1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lbBL1.setText("Tìm kiếm Tên hoạt động:");

        lbMSSV.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbBL2.setBackground(new java.awt.Color(255, 255, 255));
        lbBL2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lbBL2.setText("Danh sách hoạt động");

        txtTimKiem.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        btDKKHD.setBackground(new java.awt.Color(93, 163, 217));
        btDKKHD.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        btDKKHD.setForeground(new java.awt.Color(255, 255, 255));
        btDKKHD.setText("Đăng Ký HĐ");
        btDKKHD.setActionCommand("");
        btDKKHD.setBorder(null);
        btDKKHD.setBorderPainted(false);
        btDKKHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDKKHDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(lbTTHD))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                                .addComponent(txtTimKiem)
                                .addComponent(lbBL2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbBL1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(lbBL, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lbMSSV, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btDKKHD, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(btXoaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(213, 213, 213))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lbTTHD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbMSSV, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbBL))
                .addGap(18, 18, 18)
                .addComponent(lbBL1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTimKiem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbBL2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btDKKHD, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btXoaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTimKiemActionPerformed
        // TODO add your handling code here:
        layDSHoatDong();
    }//GEN-LAST:event_btTimKiemActionPerformed

    private void btXoaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXoaHDActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbHD.getSelectedRow();
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Chưa chọn hoạt động để xóa đăng kí", "Error", JOptionPane.ERROR_MESSAGE);
        }
        String maHoatDong = (String) tbHD.getValueAt(selectedRow, 0);
        
        int ret = JOptionPane.showConfirmDialog(null, "Xác nhận xóa", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (ret == JOptionPane.YES_OPTION) {
            Connection con = getConnection();
            if (con == null) {
                JOptionPane.showMessageDialog(this, "Lỗi kết nối cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
            }
        
            try {
                String sql = "DELETE FROM DANGKYTG WHERE MAHOATDONG = ? AND MSSV = ?";
                PreparedStatement pstmt = con.prepareStatement(sql);
                pstmt.setString(1, maHoatDong);
                pstmt.setString(2, mssv);
                ResultSet rs = pstmt.executeQuery();

                layDSHoatDong();
                JOptionPane.showMessageDialog(this, "Xóa thành công phiếu yêu cầu", "Success", JOptionPane.INFORMATION_MESSAGE);

                rs.close();
                pstmt.close();
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Lỗi trong quá trình truy vấn cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
            } 
        }
    }//GEN-LAST:event_btXoaHDActionPerformed
    
    private void btBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBackActionPerformed
        // TODO add your handling code here:
        this.dispose();
        TrangChuSV trangchuSV = new TrangChuSV();
        trangchuSV.setVisible(true);
    }//GEN-LAST:event_btBackActionPerformed

    private void btDKKHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDKKHDActionPerformed

        int selectedRow = tbHD.getSelectedRow();
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Chưa chọn hoạt động để đăng kí", "Error", JOptionPane.ERROR_MESSAGE);
        }
        String maHoatDong = (String) tbHD.getValueAt(selectedRow, 0);
        
        int ret = JOptionPane.showConfirmDialog(null, "Xác nhận đăng kí?", "Thoát", JOptionPane.YES_NO_OPTION);
        if (ret == JOptionPane.YES_OPTION) {
            Connection con = getConnection();
            if (con == null) {
                JOptionPane.showMessageDialog(this, "Lỗi kết nối cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
            }

            try {
                String sql = "INSERT INTO DANGKYTG VALUES(?, ?, 0)";
                PreparedStatement pstmt = con.prepareStatement(sql);
                pstmt.setString(1, maHoatDong);
                pstmt.setString(2, mssv);
                ResultSet rs = pstmt.executeQuery();

                layDSHoatDong();
                JOptionPane.showMessageDialog(this, "Đăng kí thành công", "Success", JOptionPane.INFORMATION_MESSAGE);

                rs.close();
                pstmt.close();
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Lỗi trong quá trình truy vấn cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
            } 
        }
    }//GEN-LAST:event_btDKKHDActionPerformed

    private void tbHDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbHDMouseClicked
        // TODO add your handling code here:
        int selectedRow = tbHD.getSelectedRow();
        if (selectedRow >= 0) {
            String maHoatDong = (String) tbHD.getValueAt(selectedRow, 0);
            hienThiChiTietHoatDong(maHoatDong);
        }
    }//GEN-LAST:event_tbHDMouseClicked

    public void thietlapManHinh() {
        tbHoatDong = new DefaultTableModel();
        String tieuDe1[] = {"Mã hoạt động", "Tên hoạt động", "Ngày diễn ra", "Số lượng đăng ký", "Tình trạng"};
        tbHoatDong.setColumnIdentifiers(tieuDe1);
        tbHD.setModel(tbHoatDong);
        setVisible(true);
        
        tbNDHoatDong = new DefaultTableModel();
        String tieuDe2[] = {"Chi tiết hoạt động"};
        tbNDHoatDong.setColumnIdentifiers(tieuDe2);
        tbCTHD.setModel(tbNDHoatDong);
        setVisible(true);
        
        lbMSSV.setText(mssv);
    }

    public void layDSHoatDong() {
        String ndTimKiem = txtTimKiem.getText();
        String tinhTrang = "Chua dang ky";
        Connection con = getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Lỗi kết nối cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        
        try {           
            StringBuilder sql = new StringBuilder("SELECT MAHOATDONG, TENHOATDONG, NGAYDIENRA, SOLUONGTOIDA, SOLUONGDK FROM HOATDONG");
            if (!ndTimKiem.isEmpty()) {
                ndTimKiem = "%" + ndTimKiem + "%";
                sql.append(" WHERE TENHOATDONG LIKE ?");
            }
            sql.append(" ORDER BY MAHOATDONG");
            
            PreparedStatement pstmt = con.prepareStatement(sql.toString());
            if (!ndTimKiem.isEmpty()) {
                pstmt.setString(1, ndTimKiem);
            }
            ResultSet rs = pstmt.executeQuery();
            
            tbHoatDong.setRowCount(0); // Clear table
            tbNDHoatDong.setRowCount(0);
            while (rs.next()) {
                String maHD = rs.getString("MAHOATDONG");
                String tenHD = rs.getString("TENHOATDONG");
                String ngayDR = convertDateFormat(rs.getString("NGAYDIENRA"));
                String slDK = rs.getString("SOLUONGDK") + "/" + rs.getString("SOLUONGTOIDA");
                
                //try {
                    String sql1 = "SELECT COUNT(MAHOATDONG) AS TINHTRANG FROM DANGKYTG WHERE MAHOATDONG = ? AND MSSV = ?";
                    PreparedStatement pstmt1 = con.prepareStatement(sql1);
                    pstmt1.setString(1, maHD);
                    pstmt1.setString(2, mssv);
                    ResultSet rs1 = pstmt1.executeQuery();

                while (rs1.next()) {
                    if(rs1.getString("TINHTRANG").equals("1"))
                    tinhTrang = "Da dang ky";
                }
                
                tbHoatDong.addRow(new Object[]{maHD, tenHD, ngayDR, slDK, tinhTrang});
                tinhTrang = "Chua dang ky";
            }
            rs.close();
            pstmt.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi trong quá trình truy vấn cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void hienThiChiTietHoatDong(String maHoatDong) {
        Connection con = getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Lỗi kết nối cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            String sql = "SELECT THONGTINCT FROM HOATDONG WHERE MAHOATDONG = ?";
            PreparedStatement pstmt = con.prepareStatement(sql);
            pstmt.setString(1, maHoatDong);
            ResultSet rs = pstmt.executeQuery();

            tbNDHoatDong.setRowCount(0); // Clear table
            if (rs.next()) {
                String ndHD = rs.getString("THONGTINCT");
                tbNDHoatDong.addRow(new Object[]{ndHD});
            }
            rs.close();
            pstmt.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi trong quá trình truy vấn cơ sở dữ liệu", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBack;
    private javax.swing.JButton btDKKHD;
    private javax.swing.JButton btTimKiem;
    private javax.swing.JButton btXoaHD;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbAnhWebDev;
    private javax.swing.JLabel lbBL;
    private javax.swing.JLabel lbBL1;
    private javax.swing.JLabel lbBL2;
    private javax.swing.JLabel lbMSSV;
    private javax.swing.JLabel lbTTHD;
    private javax.swing.JTable tbCTHD;
    private javax.swing.JTable tbHD;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
